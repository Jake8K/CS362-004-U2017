        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:22
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7://
        -:    8:int compare(const void* a, const void* b) {
   188651:    9:  if (*(int*)a > *(int*)b)
     2082:   10:    return 1;
   186569:   11:  if (*(int*)a < *(int*)b)
    67468:   12:    return -1;
   119101:   13:  return 0;
   188651:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     4400:   44:  SelectStream(1);
     4400:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     8800:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4400:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    96800:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   968000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   836000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   440000:   65:        }
    44000:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4400:   73:  if (numPlayers == 2)
        -:   74:    {
     1460:   75:      state->supplyCount[curse] = 10;
     1460:   76:    }
     2940:   77:  else if (numPlayers == 3)
        -:   78:    {
     1516:   79:      state->supplyCount[curse] = 20;
     1516:   80:    }
        -:   81:  else
        -:   82:    {
     1424:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4400:   87:  if (numPlayers == 2)
        -:   88:    {
     1460:   89:      state->supplyCount[estate] = 8;
     1460:   90:      state->supplyCount[duchy] = 8;
     1460:   91:      state->supplyCount[province] = 8;
     1460:   92:    }
        -:   93:  else
        -:   94:    {
     2940:   95:      state->supplyCount[estate] = 12;
     2940:   96:      state->supplyCount[duchy] = 12;
     2940:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4400:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4400:  102:  state->supplyCount[silver] = 40;
     4400:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   184800:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1452000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   682000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    88000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     4400:  115:		  if (numPlayers == 2){
     1460:  116:		    state->supplyCount[i] = 8;
     1460:  117:		  }
     2940:  118:		  else{ state->supplyCount[i] = 12; }
     4400:  119:		}
        -:  120:	      else
        -:  121:		{
    39600:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    44000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   638000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   638000:  130:	}
        -:  131:
    88000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    35128:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    13164:  140:      state->deckCount[i] = 0;
   105312:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    39492:  143:	  state->deck[i][j] = estate;
    39492:  144:	  state->deckCount[i]++;
    39492:  145:	}
   210624:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    92148:  148:	  state->deck[i][j] = copper;
    92148:  149:	  state->deckCount[i]++;
    92148:  150:	}
    13164:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    35128:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    13164:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    13164:  160:    }
        -:  161:
        -:  162:  //draw player hands
    35128:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    13164:  166:      state->handCount[i] = 0;
    13164:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    13164:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
   246400:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   118800:  178:      state->embargoTokens[i] = 0;
   118800:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4400:  182:  state->outpostPlayed = 0;
     4400:  183:  state->phase = 0;
     4400:  184:  state->numActions = 1;
     4400:  185:  state->numBuys = 1;
     4400:  186:  state->playedCardCount = 0;
     4400:  187:  state->whoseTurn = 0;
     4400:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    52800:  192:  for (it = 0; it < 5; it++){
    22000:  193:    drawCard(state->whoseTurn, state);
    22000:  194:  }
        -:  195:
     4400:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4400:  198:  return 0;
     4400:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    13167:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    13167:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    13167:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   291418:  214:  while (state->deckCount[player] > 0) {
   132542:  215:    card = floor(Random() * state->deckCount[player]);
   132542:  216:    newDeck[newDeckPos] = state->deck[player][card];
   132542:  217:    newDeckPos++;
  1010734:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   372825:  219:      state->deck[player][i] = state->deck[player][i+1];
   372825:  220:    }
   132542:  221:    state->deckCount[player]--;
        -:  222:  }
   291418:  223:  for (i = 0; i < newDeckPos; i++) {
   132542:  224:    state->deck[player][i] = newDeck[i];
   132542:  225:    state->deckCount[player]++;
   132542:  226:  }
        -:  227:
    13167:  228:  return 0;
    13167:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     7200:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    35288:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1810:  533:    for (i = 0; i < state->discardCount[player];i++){
      902:  534:      state->deck[player][i] = state->discard[player][i];
      902:  535:      state->discard[player][i] = -1;
      902:  536:    }
        -:  537:
        3:  538:    state->deckCount[player] = state->discardCount[player];
        3:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        3:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        3:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        3:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        3:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        3:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        3:  565:  }
        -:  566:
        -:  567:  else{
    35285:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    35285:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    35285:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    35285:  576:    state->deckCount[player]--;
    35285:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    35288:  580:  return 0;
    35288:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
     2310:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
     1155:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
     1155:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
     2310:  644:}
        -:  645://1 make the functions for the 5 cards
        -:  646://2 make sure the functions are called for these instead of the others
        -:  647://3 break these cards
        -:  648:
        -:  649://adventurer
        -:  650:// 1 ********************************************************************* 1
        -:  651:int adventurer_func(struct gameState *state) {
        -:  652:
      200:  653:    int currentPlayer = whoseTurn(state);
      200:  654:    int nextPlayer = currentPlayer + 1;
        -:  655:    int temphand[MAX_HAND];// moved above the if statement
      200:  656:    int drawntreasure=0;
        -:  657:    int cardDrawn;
      200:  658:    int z = 0;// this is the counter for the temp hand
      200:  659:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  660:        nextPlayer = 0;
    #####:  661:    }
        -:  662:
    22976:  663:    while(drawntreasure<2){
    11288:  664:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  665:            shuffle(currentPlayer, state);
    #####:  666:        }
    11288:  667:        drawCard(currentPlayer, state);
        -:  668:        //cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];/
    11288:  669:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    33064:  670:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      400:  671:            drawntreasure++;
        -:  672:        else{
    10888:  673:            temphand[z]=cardDrawn;
    10888:  674:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    10888:  675:            z++;
        -:  676:        }
        -:  677:    }
    22176:  678:    while(z-1>=0){
    10888:  679:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    10888:  680:        z=z-1;
        -:  681:    }
      200:  682:    return 0;
        -:  683:}
        -:  684:
        -:  685://smithy
        -:  686:// 2 ********************************************************************* 2
        -:  687:int smithy_func(struct gameState *state, int handPos) {
        -:  688:
      800:  689:    int currentPlayer = whoseTurn(state);
      800:  690:    int nextPlayer = currentPlayer + 1;
        -:  691:    int i;
      800:  692:    int tributeRevealedCards[2] = {-1, -1};
      800:  693:    int z = 0;// this is the counter for the temp hand
      800:  694:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  695:        nextPlayer = 0;
    #####:  696:    }
        -:  697:    //+3 Cards
     4800:  698:    for (i = 1; i < 3; i++)
        -:  699:    {
     1600:  700:        drawCard(currentPlayer, state);
     1600:  701:    }
        -:  702:
        -:  703:    //discard card from hand
      800:  704:    discardCard(handPos, currentPlayer, state, 0);
      800:  705:    return 0;
        -:  706:}
        -:  707:
        -:  708:// village
        -:  709:// 3 ********************************************************************* 3
        -:  710:int village_func(struct gameState *state, int handPos) {
        -:  711:
    #####:  712:    int currentPlayer = whoseTurn(state);
    #####:  713:    int nextPlayer = currentPlayer + 1;
        -:  714:
    #####:  715:    int tributeRevealedCards[2] = {-1, -1};
    #####:  716:    int z = 0;// this is the counter for the temp hand
    #####:  717:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  718:        nextPlayer = 0;
    #####:  719:    }
        -:  720:    //+1 Card
    #####:  721:    drawCard(currentPlayer, state);
        -:  722:
        -:  723:    //+2 Actions
    #####:  724:    state->numActions = state->numActions + 2;
        -:  725:
        -:  726:    //discard played card from hand
    #####:  727:    discardCard(--handPos, currentPlayer, state, 0);
    #####:  728:    return 0;
        -:  729:}
        -:  730:
        -:  731:// great hall
        -:  732:// 4 ********************************************************************* 4
        -:  733:int great_hall_func(struct gameState *state, int handPos) {
        -:  734:
      400:  735:    int currentPlayer = whoseTurn(state);
      400:  736:    int nextPlayer = currentPlayer + 1;
        -:  737:
      400:  738:    int tributeRevealedCards[2] = {-1, -1};
      400:  739:    int z = 0;// this is the counter for the temp hand
      400:  740:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  741:        nextPlayer = 0;
    #####:  742:    }
        -:  743:    //+1 Card
      400:  744:    drawCard(nextPlayer, state);
        -:  745:
        -:  746:    //+1 Actions
      400:  747:    state->numActions++;
        -:  748:
        -:  749:    //discard card from hand
      400:  750:    discardCard(handPos, currentPlayer, state, 0);
      400:  751:    return 0;
        -:  752:}
        -:  753:
        -:  754:
        -:  755:// embargo
        -:  756:// 5 ************************************************************************ 5
        -:  757:int embargo_func(struct gameState *state, int choice1, int handPos) {
        -:  758:
     1400:  759:    int currentPlayer = whoseTurn(state);
     1400:  760:    int nextPlayer = currentPlayer + 1;
        -:  761:
     1400:  762:    int tributeRevealedCards[2] = {-1, -1};
     1400:  763:    int z = 0;// this is the counter for the temp hand
     1400:  764:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  765:        nextPlayer = 0;
    #####:  766:    }
        -:  767:
        -:  768:    //+2 Coins
     1400:  769:    state->coins = state->coins + 2;
        -:  770:
        -:  771:    //see if selected pile is in play
     1400:  772:    if ( state->supplyCount[choice1] == -1 )
        -:  773:    {
    #####:  774:        return -1;
        -:  775:    }
        -:  776:
        -:  777:    //add embargo token to selected supply pile
     1400:  778:    state->embargoTokens[choice1]++;
        -:  779:
        -:  780:    //trash card
     1400:  781:    discardCard(handPos, currentPlayer, state, 1);
     1400:  782:    return 0;
        -:  783:
     1400:  784:}
        -:  785:
        -:  786:
        -:  787:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  788:{
        -:  789:  int i;
        -:  790:  int j;
        -:  791:  int k;
        -:  792:  int x;
        -:  793:  int index;
     4400:  794:  int currentPlayer = whoseTurn(state);
     4400:  795:  int nextPlayer = currentPlayer + 1;
        -:  796:
     4400:  797:  int tributeRevealedCards[2] = {-1, -1};
        -:  798:  int temphand[MAX_HAND];// moved above the if statement
     4400:  799:  int drawntreasure=0;
        -:  800:  int cardDrawn;
     4400:  801:  int z = 0;// this is the counter for the temp hand
     4400:  802:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  803:    nextPlayer = 0;
    #####:  804:  }
        -:  805:
        -:  806:  //uses switch to select card and perform actions
     4400:  807:  switch( card )
        -:  808:    {
        -:  809:    case adventurer:
      200:  810:        return adventurer_func(state);
        -:  811:
        -:  812:    case council_room:
        -:  813:      //+4 Cards
    #####:  814:      for (i = 0; i < 4; i++)
        -:  815:	{
    #####:  816:	  drawCard(currentPlayer, state);
    #####:  817:	}
        -:  818:
        -:  819:      //+1 Buy
    #####:  820:      state->numBuys++;
        -:  821:
        -:  822:      //Each other player draws a card
    #####:  823:      for (i = 0; i < state->numPlayers; i++)
        -:  824:	{
    #####:  825:	  if ( i != currentPlayer )
        -:  826:	    {
    #####:  827:	      drawCard(i, state);
    #####:  828:	    }
    #####:  829:	}
        -:  830:
        -:  831:      //put played card in played card pile
    #####:  832:      discardCard(handPos, currentPlayer, state, 0);
        -:  833:
    #####:  834:      return 0;
        -:  835:
        -:  836:    case feast:
        -:  837:      //gain card with cost up to 5
        -:  838:      //Backup hand
    #####:  839:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  840:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  841:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  842:      }
        -:  843:      //Backup hand
        -:  844:
        -:  845:      //Update Coins for Buy
    #####:  846:      updateCoins(currentPlayer, state, 5);
    #####:  847:      x = 1;//Condition to loop on
    #####:  848:      while( x == 1) {//Buy one card
    #####:  849:	if (supplyCount(choice1, state) <= 0){
        -:  850:	  if (DEBUG)
        -:  851:	    printf("None of that card left, sorry!\n");
        -:  852:
        -:  853:	  if (DEBUG){
        -:  854:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  855:	  }
    #####:  856:	}
    #####:  857:	else if (state->coins < getCost(choice1)){
    #####:  858:	  printf("That card is too expensive!\n");
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  862:	  }
    #####:  863:	}
        -:  864:	else{
        -:  865:
        -:  866:	  if (DEBUG){
        -:  867:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  868:	  }
        -:  869:
    #####:  870:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  871:	  x = 0;//No more buying cards
        -:  872:
        -:  873:	  if (DEBUG){
        -:  874:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  875:	  }
        -:  876:
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      //Reset Hand
    #####:  881:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  882:	state->hand[currentPlayer][i] = temphand[i];
    #####:  883:	temphand[i] = -1;
    #####:  884:      }
        -:  885:      //Reset Hand
        -:  886:
    #####:  887:      return 0;
        -:  888:
        -:  889:    case gardens:
    #####:  890:      return -1;
        -:  891:
        -:  892:    case mine:
     1600:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
     2755:  895:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  896:	{
      445:  897:	  return -1;
        -:  898:	}
        -:  899:
     2310:  900:      if (choice2 > treasure_map || choice2 < curse)
        -:  901:	{
    #####:  902:	  return -1;
        -:  903:	}
        -:  904:
     1155:  905:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  906:	{
     1155:  907:	  return -1;
        -:  908:	}
        -:  909:
    #####:  910:      gainCard(choice2, state, 2, currentPlayer);
        -:  911:
        -:  912:      //discard card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
        -:  914:
        -:  915:      //discard trashed card
    #####:  916:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  917:	{
    #####:  918:	  if (state->hand[currentPlayer][i] == j)
        -:  919:	    {
    #####:  920:	      discardCard(i, currentPlayer, state, 0);
    #####:  921:	      break;
        -:  922:	    }
    #####:  923:	}
        -:  924:
    #####:  925:      return 0;
        -:  926:
        -:  927:    case remodel:
    #####:  928:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  929:
    #####:  930:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  931:	{
    #####:  932:	  return -1;
        -:  933:	}
        -:  934:
    #####:  935:      gainCard(choice2, state, 0, currentPlayer);
        -:  936:
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:
        -:  940:      //discard trashed card
    #####:  941:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  942:	{
    #####:  943:	  if (state->hand[currentPlayer][i] == j)
        -:  944:	    {
    #####:  945:	      discardCard(i, currentPlayer, state, 0);
    #####:  946:	      break;
        -:  947:	    }
    #####:  948:	}
        -:  949:
        -:  950:
    #####:  951:      return 0;
        -:  952:
        -:  953:    case smithy:
      800:  954:        return smithy_func(state, handPos);
        -:  955:
        -:  956:    case village:
    #####:  957:        return village_func(state, handPos);
        -:  958:
        -:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
    #####:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
    #####:  985:		isGameOver(state);
    #####:  986:	      }
    #####:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
    #####:  989:	  }
        -:  990:
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
    #####:  995:      }
        -:  996:
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
    #####: 1002:	    isGameOver(state);
    #####: 1003:	  }
    #####: 1004:	}
        -: 1005:      }
        -: 1006:
        -: 1007:
    #####: 1008:      return 0;
        -: 1009:
        -: 1010:    case great_hall:
      400: 1011:            return great_hall_func(state, handPos);
        -: 1012:
        -: 1013:    case minion:
        -: 1014:      //+1 action
    #####: 1015:      state->numActions++;
        -: 1016:
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
        -: 1019:
    #####: 1020:      if (choice1)		//+2 coins
        -: 1021:	{
    #####: 1022:	  state->coins = state->coins + 2;
    #####: 1023:	}
        -: 1024:
    #####: 1025:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1026:	{
        -: 1027:	  //discard hand
    #####: 1028:	  while(numHandCards(state) > 0)
        -: 1029:	    {
    #####: 1030:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1031:	    }
        -: 1032:
        -: 1033:	  //draw 4
    #####: 1034:	  for (i = 0; i < 4; i++)
        -: 1035:	    {
    #####: 1036:	      drawCard(currentPlayer, state);
    #####: 1037:	    }
        -: 1038:
        -: 1039:	  //other players discard hand and redraw if hand size > 4
    #####: 1040:	  for (i = 0; i < state->numPlayers; i++)
        -: 1041:	    {
    #####: 1042:	      if (i != currentPlayer)
        -: 1043:		{
    #####: 1044:		  if ( state->handCount[i] > 4 )
        -: 1045:		    {
        -: 1046:		      //discard hand
    #####: 1047:		      while( state->handCount[i] > 0 )
        -: 1048:			{
    #####: 1049:			  discardCard(handPos, i, state, 0);
        -: 1050:			}
        -: 1051:
        -: 1052:		      //draw 4
    #####: 1053:		      for (j = 0; j < 4; j++)
        -: 1054:			{
    #####: 1055:			  drawCard(i, state);
    #####: 1056:			}
    #####: 1057:		    }
    #####: 1058:		}
    #####: 1059:	    }
        -: 1060:
    #####: 1061:	}
    #####: 1062:      return 0;
        -: 1063:
        -: 1064:    case steward:
    #####: 1065:      if (choice1 == 1)
        -: 1066:	{
        -: 1067:	  //+2 cards
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	}
    #####: 1071:      else if (choice1 == 2)
        -: 1072:	{
        -: 1073:	  //+2 coins
    #####: 1074:	  state->coins = state->coins + 2;
    #####: 1075:	}
        -: 1076:      else
        -: 1077:	{
        -: 1078:	  //trash 2 cards in hand
    #####: 1079:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1080:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1081:	}
        -: 1082:
        -: 1083:      //discard card from hand
    #####: 1084:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1085:      return 0;
        -: 1086:
        -: 1087:    case tribute:
    #####: 1088:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1089:	if (state->deckCount[nextPlayer] > 0){
    #####: 1090:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1091:	  state->deckCount[nextPlayer]--;
    #####: 1092:	}
    #####: 1093:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1094:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1095:	  state->discardCount[nextPlayer]--;
    #####: 1096:	}
        -: 1097:	else{
        -: 1098:	  //No Card to Reveal
        -: 1099:	  if (DEBUG){
        -: 1100:	    printf("No cards to reveal\n");
        -: 1101:	  }
        -: 1102:	}
    #####: 1103:      }
        -: 1104:
        -: 1105:      else{
    #####: 1106:	if (state->deckCount[nextPlayer] == 0){
    #####: 1107:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1108:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1109:	    state->deckCount[nextPlayer]++;
    #####: 1110:	    state->discard[nextPlayer][i] = -1;
    #####: 1111:	    state->discardCount[nextPlayer]--;
    #####: 1112:	  }
        -: 1113:
    #####: 1114:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1115:	}
    #####: 1116:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1117:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1118:	state->deckCount[nextPlayer]--;
    #####: 1119:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1120:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1121:	state->deckCount[nextPlayer]--;
        -: 1122:      }
        -: 1123:
    #####: 1124:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1125:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1126:	state->playedCardCount++;
    #####: 1127:	tributeRevealedCards[1] = -1;
    #####: 1128:      }
        -: 1129:
    #####: 1130:      for (i = 0; i <= 2; i ++){
    #####: 1131:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1132:	  state->coins += 2;
    #####: 1133:	}
        -: 1134:
    #####: 1135:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1136:	  drawCard(currentPlayer, state);
    #####: 1137:	  drawCard(currentPlayer, state);
    #####: 1138:	}
        -: 1139:	else{//Action Card
    #####: 1140:	  state->numActions = state->numActions + 2;
        -: 1141:	}
    #####: 1142:      }
        -: 1143:
    #####: 1144:      return 0;
        -: 1145:
        -: 1146:    case ambassador:
    #####: 1147:      j = 0;		//used to check if player has enough cards to discard
        -: 1148:
    #####: 1149:      if (choice2 > 2 || choice2 < 0)
        -: 1150:	{
    #####: 1151:	  return -1;
        -: 1152:	}
        -: 1153:
    #####: 1154:      if (choice1 == handPos)
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
    #####: 1159:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1160:	{
    #####: 1161:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1162:	    {
    #####: 1163:	      j++;
    #####: 1164:	    }
    #####: 1165:	}
    #####: 1166:      if (j < choice2)
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:
        -: 1171:      if (DEBUG)
        -: 1172:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1173:
        -: 1174:      //increase supply count for choosen card by amount being discarded
    #####: 1175:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1176:
        -: 1177:      //each other player gains a copy of revealed card
    #####: 1178:      for (i = 0; i < state->numPlayers; i++)
        -: 1179:	{
    #####: 1180:	  if (i != currentPlayer)
        -: 1181:	    {
    #####: 1182:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1183:	    }
    #####: 1184:	}
        -: 1185:
        -: 1186:      //discard played card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
        -: 1188:
        -: 1189:      //trash copies of cards returned to supply
    #####: 1190:      for (j = 0; j < choice2; j++)
        -: 1191:	{
    #####: 1192:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1193:	    {
    #####: 1194:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1195:		{
    #####: 1196:		  discardCard(i, currentPlayer, state, 1);
    #####: 1197:		  break;
        -: 1198:		}
    #####: 1199:	    }
    #####: 1200:	}
        -: 1201:
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:    case cutpurse:
        -: 1205:
    #####: 1206:      updateCoins(currentPlayer, state, 2);
    #####: 1207:      for (i = 0; i < state->numPlayers; i++)
        -: 1208:	{
    #####: 1209:	  if (i != currentPlayer)
        -: 1210:	    {
    #####: 1211:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1212:		{
    #####: 1213:		  if (state->hand[i][j] == copper)
        -: 1214:		    {
    #####: 1215:		      discardCard(j, i, state, 0);
    #####: 1216:		      break;
        -: 1217:		    }
    #####: 1218:		  if (j == state->handCount[i])
        -: 1219:		    {
    #####: 1220:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1221:			{
        -: 1222:			  if (DEBUG)
        -: 1223:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1224:			}
    #####: 1225:		      break;
        -: 1226:		    }
    #####: 1227:		}
        -: 1228:
    #####: 1229:	    }
        -: 1230:
    #####: 1231:	}
        -: 1232:
        -: 1233:      //discard played card from hand
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
        -: 1235:
    #####: 1236:      return 0;
        -: 1237:
        -: 1238:
        -: 1239:    case embargo:
     1400: 1240:        return embargo_func(state, choice1, handPos);
        -: 1241:
        -: 1242:    case outpost:
        -: 1243:      //set outpost flag
    #####: 1244:      state->outpostPlayed++;
        -: 1245:
        -: 1246:      //discard card
    #####: 1247:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:      return 0;
        -: 1249:
        -: 1250:    case salvager:
        -: 1251:      //+1 buy
    #####: 1252:      state->numBuys++;
        -: 1253:
    #####: 1254:      if (choice1)
        -: 1255:	{
        -: 1256:	  //gain coins equal to trashed card
    #####: 1257:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1258:	  //trash card
    #####: 1259:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1260:	}
        -: 1261:
        -: 1262:      //discard card
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1264:      return 0;
        -: 1265:
        -: 1266:    case sea_hag:
    #####: 1267:      for (i = 0; i < state->numPlayers; i++){
    #####: 1268:	if (i != currentPlayer){
    #####: 1269:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1270:	  state->discardCount[i]++;
    #####: 1271:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1272:	}
    #####: 1273:      }
    #####: 1274:      return 0;
        -: 1275:
        -: 1276:    case treasure_map:
        -: 1277:      //search hand for another treasure_map
    #####: 1278:      index = -1;
    #####: 1279:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1280:	{
    #####: 1281:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1282:	    {
    #####: 1283:	      index = i;
    #####: 1284:	      break;
        -: 1285:	    }
    #####: 1286:	}
    #####: 1287:      if (index > -1)
        -: 1288:	{
        -: 1289:	  //trash both treasure cards
    #####: 1290:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1291:	  discardCard(index, currentPlayer, state, 1);
        -: 1292:
        -: 1293:	  //gain 4 Gold cards
    #####: 1294:	  for (i = 0; i < 4; i++)
        -: 1295:	    {
    #####: 1296:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1297:	    }
        -: 1298:
        -: 1299:	  //return success
    #####: 1300:	  return 1;
        -: 1301:	}
        -: 1302:
        -: 1303:      //no second treasure_map found in hand
    #####: 1304:      return -1;
        -: 1305:    }
        -: 1306:
    #####: 1307:  return -1;
     4400: 1308:}
        -: 1309:
        -: 1310:
        -: 1311:
        -: 1312:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1313:{
        -: 1314:
        -: 1315:  //if card is not trashed, added to Played pile
     2600: 1316:  if (trashFlag < 1)
        -: 1317:    {
        -: 1318:      //add card to played pile
     1200: 1319:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1200: 1320:      state->playedCardCount++;
     1200: 1321:    }
        -: 1322:
        -: 1323:  //set played card to -1
     2600: 1324:  state->hand[currentPlayer][handPos] = -1;
        -: 1325:
        -: 1326:  //remove card from player's hand
     2600: 1327:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1328:    {
        -: 1329:      //reduce number of cards in hand
    #####: 1330:      state->handCount[currentPlayer]--;
    #####: 1331:    }
     2600: 1332:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1333:    {
        -: 1334:      //reduce number of cards in hand
    #####: 1335:      state->handCount[currentPlayer]--;
    #####: 1336:    }
        -: 1337:  else
        -: 1338:    {
        -: 1339:      //replace discarded card with last card in hand
     2600: 1340:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1341:      //set last card to -1
     2600: 1342:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1343:      //reduce number of cards in hand
     2600: 1344:      state->handCount[currentPlayer]--;
        -: 1345:    }
        -: 1346:
     2600: 1347:  return 0;
        -: 1348:}
        -: 1349:
        -: 1350:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1351:{
        -: 1352:  //Note: supplyPos is enum of choosen card
        -: 1353:
        -: 1354:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1355:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1356:    {
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:
        -: 1360:  //added card for [whoseTurn] current player:
        -: 1361:  // toFlag = 0 : add to discard
        -: 1362:  // toFlag = 1 : add to deck
        -: 1363:  // toFlag = 2 : add to hand
        -: 1364:
    #####: 1365:  if (toFlag == 1)
        -: 1366:    {
    #####: 1367:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1368:      state->deckCount[player]++;
    #####: 1369:    }
    #####: 1370:  else if (toFlag == 2)
        -: 1371:    {
    #####: 1372:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1373:      state->handCount[player]++;
    #####: 1374:    }
        -: 1375:  else
        -: 1376:    {
    #####: 1377:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1378:      state->discardCount[player]++;
        -: 1379:    }
        -: 1380:
        -: 1381:  //decrease number in supply pile
    #####: 1382:  state->supplyCount[supplyPos]--;
        -: 1383:
    #####: 1384:  return 0;
    #####: 1385:}
        -: 1386:
        -: 1387:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1388:{
        -: 1389:  int i;
        -: 1390:
        -: 1391:  //reset coin count
     4400: 1392:  state->coins = 0;
        -: 1393:
        -: 1394:  //add coins for each Treasure card in player's hand
    52800: 1395:  for (i = 0; i < state->handCount[player]; i++)
        -: 1396:    {
    22000: 1397:      if (state->hand[player][i] == copper)
        -: 1398:	{
    15557: 1399:	  state->coins += 1;
    15557: 1400:	}
     6443: 1401:      else if (state->hand[player][i] == silver)
        -: 1402:	{
    #####: 1403:	  state->coins += 2;
    #####: 1404:	}
     6443: 1405:      else if (state->hand[player][i] == gold)
        -: 1406:	{
    #####: 1407:	  state->coins += 3;
    #####: 1408:	}
    22000: 1409:    }
        -: 1410:
        -: 1411:  //add bonus
     4400: 1412:  state->coins += bonus;
        -: 1413:
     4400: 1414:  return 0;
        -: 1415:}
        -: 1416:
        -: 1417:
        -: 1418://end of dominion.c
