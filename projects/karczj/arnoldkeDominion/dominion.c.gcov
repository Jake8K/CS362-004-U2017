        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:25
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
124005726:    9:  if (*(int*)a > *(int*)b)
  1120373:   10:    return 1;
122885353:   11:  if (*(int*)a < *(int*)b)
 44416409:   12:    return -1;
 78468944:   13:  return 0;
124005726:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
  2892960:   44:  SelectStream(1);
  2892960:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
  5785920:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
  2892960:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
 63645120:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
636451200:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
549662400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
289296000:   65:        }
 28929600:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
  2892960:   73:  if (numPlayers == 2)
        -:   74:    {
   963828:   75:      state->supplyCount[curse] = 10;
   963828:   76:    }
  1929132:   77:  else if (numPlayers == 3)
        -:   78:    {
   964808:   79:      state->supplyCount[curse] = 20;
   964808:   80:    }
        -:   81:  else
        -:   82:    {
   964324:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
  2892960:   87:  if (numPlayers == 2)
        -:   88:    {
   963828:   89:      state->supplyCount[estate] = 8;
   963828:   90:      state->supplyCount[duchy] = 8;
   963828:   91:      state->supplyCount[province] = 8;
   963828:   92:    }
        -:   93:  else
        -:   94:    {
  1929132:   95:      state->supplyCount[estate] = 12;
  1929132:   96:      state->supplyCount[duchy] = 12;
  1929132:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
  2892960:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
  2892960:  102:  state->supplyCount[silver] = 40;
  2892960:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
121504320:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
954676800:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
448408800:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
 57859200:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
  2892960:  115:		  if (numPlayers == 2){ 
   963828:  116:		    state->supplyCount[i] = 8; 
   963828:  117:		  }
  1929132:  118:		  else{ state->supplyCount[i] = 12; }
  2892960:  119:		}
        -:  120:	      else
        -:  121:		{
 26036640:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
 28929600:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
419479200:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
419479200:  130:	}
        -:  131:
 57859200:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
 23144672:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
  8679376:  140:      state->deckCount[i] = 0;
 69435008:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
 26038128:  143:	  state->deck[i][j] = estate;
 26038128:  144:	  state->deckCount[i]++;
 26038128:  145:	}
138870016:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
 60755632:  148:	  state->deck[i][j] = copper;
 60755632:  149:	  state->deckCount[i]++;		
 60755632:  150:	}
  8679376:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
 23144672:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
  8679376:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
  8679376:  160:    }
        -:  161:
        -:  162:  //draw player hands
 23144672:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
  8679376:  166:      state->handCount[i] = 0;
  8679376:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
  8679376:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
162005760:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
 78109920:  178:      state->embargoTokens[i] = 0;
 78109920:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
  2892960:  182:  state->outpostPlayed = 0;
  2892960:  183:  state->phase = 0;
  2892960:  184:  state->numActions = 1;
  2892960:  185:  state->numBuys = 1;
  2892960:  186:  state->playedCardCount = 0;
  2892960:  187:  state->whoseTurn = 0;
  2892960:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
 34715520:  192:  for (it = 0; it < 5; it++){
 14464800:  193:    drawCard(state->whoseTurn, state);
 14464800:  194:  }
        -:  195:
  2892960:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
  2892960:  198:  return 0;
  2892960:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  8683025:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  8683025:  209:  if (state->deckCount[player] < 1)
     1420:  210:    return -1;
  8681605:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
192048870:  214:  while (state->deckCount[player] > 0) {
 87342830:  215:    card = floor(Random() * state->deckCount[player]);
 87342830:  216:    newDeck[newDeckPos] = state->deck[player][card];
 87342830:  217:    newDeckPos++;
656390496:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
240852418:  219:      state->deck[player][i] = state->deck[player][i+1];
240852418:  220:    }
 87342830:  221:    state->deckCount[player]--;
        -:  222:  }
192048870:  223:  for (i = 0; i < newDeckPos; i++) {
 87342830:  224:    state->deck[player][i] = newDeck[i];
 87342830:  225:    state->deckCount[player]++;
 87342830:  226:  }
        -:  227:
  8681605:  228:  return 0;
  8683025:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
  2892960:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
 30774330:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1103902:  533:    for (i = 0; i < state->discardCount[player];i++){
   549070:  534:      state->deck[player][i] = state->discard[player][i];
   549070:  535:      state->discard[player][i] = -1;
   549070:  536:    }
        -:  537:
     2881:  538:    state->deckCount[player] = state->discardCount[player];
     2881:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     2881:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     2881:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     2881:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     2881:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     2881:  559:    if (deckCounter == 0)
      652:  560:      return -1;
        -:  561:
     2229:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     2229:  563:    state->deckCount[player]--;
     2229:  564:    state->handCount[player]++;//Increment hand count
     2229:  565:  }
        -:  566:
        -:  567:  else{
 30771449:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
 30771449:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
 30771449:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 30771449:  576:    state->deckCount[player]--;
 30771449:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
 30773678:  580:  return 0;
 30774330:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
        -:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
   192960:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
   192960:  652:	int z=0;
        -:  653:	
 25084980:  654:	while(drawntreasure<2){
 12349530:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
      768:  656:		shuffle(currentPlayer, state);
      768:  657:		}
 12349530:  658:		drawCard(currentPlayer, state);
 12349530:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
 36662670:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
   192960:  661:			drawntreasure++;
        -:  662:		else{
 12156570:  663:			temphand[z]=cardDrawn;
 12156570:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
 12156570:  665:			z++;
        -:  666:		}
        -:  667:	}
 24699060:  668:	while(z-1>=0){
 12156570:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
 12156570:  670:		z=z-1;
        -:  671:	}
   192960:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
        -:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
  7560000:  679:	for (i = 0; i < 2; i++)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
  2520000:  682:		drawCard(currentPlayer, state);
  2520000:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
  1260000:  686:	discardCard(handPos, currentPlayer, state, 0);
  1260000:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
        -:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
    #####:  693:	drawCard(currentPlayer, state);
        -:  694:	
        -:  695:	//+2 Actions
    #####:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
    #####:  700:	discardCard(handPos, currentPlayer, state, 0);
    #####:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
        -:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
    #####:  708:	for (i = 1; i < 4; i++)
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
    #####:  711:		drawCard(currentPlayer, state);
    #####:  712:	}
        -:  713:
        -:  714:	//+1 Buy
    #####:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
    #####:  718:	for (i = 0; i < state->numPlayers; i++)
        -:  719:	{
    #####:  720:		if ( i != currentPlayer )
        -:  721:		{
    #####:  722:			drawCard(i, state);
    #####:  723:		}
    #####:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
    #####:  727:	discardCard(handPos, currentPlayer, state, 0);
        -:  728:
    #####:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
        -:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
    #####:  761:	return 0;
    #####:  762:}
        -:  763:/*********************************************************/
        -:  764:
        -:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
  2892960:  772:  int currentPlayer = whoseTurn(state);
  2892960:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
  2892960:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
  2892960:  779:  int z = 0;// this is the counter for the temp hand
  2892960:  780:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  781:    nextPlayer = 0;
    #####:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
  2892960:  786:  switch( card ) 
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
   192960:  810:			return adventurerCard(currentPlayer, temphand, state);
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
    #####:  837:		return council_roomCard(currentPlayer, handPos, state);
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
    #####:  852:	if (supplyCount(choice1, state) <= 0){
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
    #####:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
    #####:  861:	  printf("That card is too expensive!\n");
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
    #####:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
    #####:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
    #####:  924:	      break;
        -:  925:	    }
    #####:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
    #####:  949:	      break;
        -:  950:	    }
    #####:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
  1260000:  968:		return smithyCard(currentPlayer, handPos, state);
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
    #####:  982:		return villageCard(currentPlayer, handPos, state);
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
    #####: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
    #####: 1010:		isGameOver(state);
    #####: 1011:	      }
    #####: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
    #####: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
    #####: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
    #####: 1027:	    isGameOver(state);
    #####: 1028:	  }
    #####: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
  1440000: 1037:      drawCard(currentPlayer, state);
        -: 1038:			
        -: 1039:      //+1 Actions
  1440000: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
  1440000: 1043:      discardCard(handPos, currentPlayer, state, 0);
  1440000: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
    #####: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
    #####: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
    #####: 1089:			}
    #####: 1090:		    }
    #####: 1091:		}
    #####: 1092:	    }
        -: 1093:				
    #####: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
    #####: 1102:	  drawCard(currentPlayer, state);
    #####: 1103:	}
    #####: 1104:      else if (choice1 == 2)
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
    #####: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
    #####: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
    #####: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
    #####: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
    #####: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
    #####: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1165:	  state->coins += 2;
    #####: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1169:	  drawCard(currentPlayer, state);
    #####: 1170:	  drawCard(currentPlayer, state);
    #####: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
    #####: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1195:	    {
    #####: 1196:	      j++;
    #####: 1197:	    }
    #####: 1198:	}
    #####: 1199:      if (j < choice2)
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1216:	    }
    #####: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
    #####: 1230:		  break;
        -: 1231:		}
    #####: 1232:	    }
    #####: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
    #####: 1260:		}
        -: 1261:					
    #####: 1262:	    }
        -: 1263:				
    #####: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
    #####: 1319:	if (i != currentPlayer){
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1323:	}
    #####: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
    #####: 1339:	}
    #####: 1340:      if (index > -1)
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
  2892960: 1361:}
        -: 1362:
        -: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
  2700000: 1367:  if (trashFlag < 1)
        -: 1368:    {
        -: 1369:      //add card to played pile
  2700000: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
  2700000: 1371:      state->playedCardCount++;
  2700000: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
  2700000: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
  2700000: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
     1311: 1381:      state->handCount[currentPlayer]--;
     1311: 1382:    }
  2698689: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
      596: 1386:      state->handCount[currentPlayer]--;
      596: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
  2698093: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
  2698093: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
  2698093: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
  2700000: 1398:  return 0;
        -: 1399:}
        -: 1400:
        -: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
    #####: 1420:    }
    #####: 1421:  else if (toFlag == 2)
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
    #####: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
    #####: 1436:}
        -: 1437:
        -: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
  2892960: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
 34715520: 1446:  for (i = 0; i < state->handCount[player]; i++)
        -: 1447:    {
 14464800: 1448:      if (state->hand[player][i] == copper)
        -: 1449:	{
 10125046: 1450:	  state->coins += 1;
 10125046: 1451:	}
  4339754: 1452:      else if (state->hand[player][i] == silver)
        -: 1453:	{
    #####: 1454:	  state->coins += 2;
    #####: 1455:	}
  4339754: 1456:      else if (state->hand[player][i] == gold)
        -: 1457:	{
    #####: 1458:	  state->coins += 3;
    #####: 1459:	}	
 14464800: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
  2892960: 1463:  state->coins += bonus;
        -: 1464:
  2892960: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
