***************************************************
\/\/\/\/\/\/\/\/| TESTING SMITHY |\/\/\/\/\/\/\/\/\ 
***************************************************
... running 1800 randomly generated tests...

Testing Complete... 
	Failures: 1800 
	Successful Runs: 0
FAILED TEST 
	:(

File 'dominion.c'
Lines executed:25.88% of 680
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:15
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7://
        -:    8:int compare(const void* a, const void* b) {
  1142374:    9:  if (*(int*)a > *(int*)b)
     3899:   10:    return 1;
  1138475:   11:  if (*(int*)a < *(int*)b)
   407870:   12:    return -1;
   730605:   13:  return 0;
  1142374:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    27000:   44:  SelectStream(1);
    27000:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    54000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    27000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   594000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  5940000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  5130000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
  2700000:   65:        }
   270000:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    27000:   73:  if (numPlayers == 2)
        -:   74:    {
     8993:   75:      state->supplyCount[curse] = 10;
     8993:   76:    }
    18007:   77:  else if (numPlayers == 3)
        -:   78:    {
     9090:   79:      state->supplyCount[curse] = 20;
     9090:   80:    }
        -:   81:  else
        -:   82:    {
     8917:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    27000:   87:  if (numPlayers == 2)
        -:   88:    {
     8993:   89:      state->supplyCount[estate] = 8;
     8993:   90:      state->supplyCount[duchy] = 8;
     8993:   91:      state->supplyCount[province] = 8;
     8993:   92:    }
        -:   93:  else
        -:   94:    {
    18007:   95:      state->supplyCount[estate] = 12;
    18007:   96:      state->supplyCount[duchy] = 12;
    18007:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    27000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    27000:  102:  state->supplyCount[silver] = 40;
    27000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1134000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  8910000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  4185000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   540000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    27000:  115:		  if (numPlayers == 2){
     8993:  116:		    state->supplyCount[i] = 8;
     8993:  117:		  }
    18007:  118:		  else{ state->supplyCount[i] = 12; }
    27000:  119:		}
        -:  120:	      else
        -:  121:		{
   243000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   270000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  3915000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  3915000:  130:	}
        -:  131:
   540000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   215848:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    80924:  140:      state->deckCount[i] = 0;
   647392:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   242772:  143:	  state->deck[i][j] = estate;
   242772:  144:	  state->deckCount[i]++;
   242772:  145:	}
  1294784:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   566468:  148:	  state->deck[i][j] = copper;
   566468:  149:	  state->deckCount[i]++;
   566468:  150:	}
    80924:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   215848:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    80924:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    80924:  160:    }
        -:  161:
        -:  162:  //draw player hands
   215848:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    80924:  166:      state->handCount[i] = 0;
    80924:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    80924:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
  1512000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   729000:  178:      state->embargoTokens[i] = 0;
   729000:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    27000:  182:  state->outpostPlayed = 0;
    27000:  183:  state->phase = 0;
    27000:  184:  state->numActions = 1;
    27000:  185:  state->numBuys = 1;
    27000:  186:  state->playedCardCount = 0;
    27000:  187:  state->whoseTurn = 0;
    27000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   324000:  192:  for (it = 0; it < 5; it++){
   135000:  193:    drawCard(state->whoseTurn, state);
   135000:  194:  }
        -:  195:
    27000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    27000:  198:  return 0;
    27000:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    80942:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    80942:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    80942:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1786124:  214:  while (state->deckCount[player] > 0) {
   812120:  215:    card = floor(Random() * state->deckCount[player]);
   812120:  216:    newDeck[newDeckPos] = state->deck[player][card];
   812120:  217:    newDeckPos++;
  5691178:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  2033469:  219:      state->deck[player][i] = state->deck[player][i+1];
  2033469:  220:    }
   812120:  221:    state->deckCount[player]--;
        -:  222:  }
  1786124:  223:  for (i = 0; i < newDeckPos; i++) {
   812120:  224:    state->deck[player][i] = newDeck[i];
   812120:  225:    state->deckCount[player]++;
   812120:  226:  }
        -:  227:
    80942:  228:  return 0;
    80942:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    54000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   172800:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5796:  533:    for (i = 0; i < state->discardCount[player];i++){
     2880:  534:      state->deck[player][i] = state->discard[player][i];
     2880:  535:      state->discard[player][i] = -1;
     2880:  536:    }
        -:  537:
       18:  538:    state->deckCount[player] = state->discardCount[player];
       18:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       18:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       18:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       18:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       18:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       18:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       18:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       18:  563:    state->deckCount[player]--;
       18:  564:    state->handCount[player]++;//Increment hand count
       18:  565:  }
        -:  566:
        -:  567:  else{
   172782:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   172782:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   172782:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   172782:  576:    state->deckCount[player]--;
   172782:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   172800:  580:  return 0;
   172800:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645://1 make the functions for the 5 cards
        -:  646://2 make sure the functions are called for these instead of the others
        -:  647://3 break these cards
        -:  648:
        -:  649://adventurer
        -:  650:// 1 ********************************************************************* 1
        -:  651:int adventurer_func(struct gameState *state) {
        -:  652:
    #####:  653:    int currentPlayer = whoseTurn(state);
    #####:  654:    int nextPlayer = currentPlayer + 1;
        -:  655:    int temphand[MAX_HAND];// moved above the if statement
    #####:  656:    int drawntreasure=0;
        -:  657:    int cardDrawn;
    #####:  658:    int z = 0;// this is the counter for the temp hand
    #####:  659:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  660:        nextPlayer = 0;
    #####:  661:    }
        -:  662:
    #####:  663:    while(drawntreasure<2){
    #####:  664:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  665:            shuffle(currentPlayer, state);
    #####:  666:        }
    #####:  667:        drawCard(currentPlayer, state);
    #####:  668:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  669:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  670:            drawntreasure++;
        -:  671:        else{
    #####:  672:            temphand[z]=cardDrawn;
    #####:  673:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  674:            z++;
        -:  675:        }
        -:  676:    }
    #####:  677:    while(z-1>=0){
    #####:  678:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  679:        z=z-1;
        -:  680:    }
    #####:  681:    return 0;
        -:  682:}
        -:  683:
        -:  684://smithy
        -:  685:// 2 ********************************************************************* 2
        -:  686:int smithy_func(struct gameState *state, int handPos) {
        -:  687:
    10800:  688:    int currentPlayer = whoseTurn(state);
    10800:  689:    int nextPlayer = currentPlayer + 1;
        -:  690:    int i;
    10800:  691:    int tributeRevealedCards[2] = {-1, -1};
    10800:  692:    int z = 0;// this is the counter for the temp hand
    10800:  693:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  694:        nextPlayer = 0;
    #####:  695:    }
        -:  696:    //+3 Cards
    64800:  697:    for (i = 1; i < 3; i++)
        -:  698:    {
    21600:  699:        drawCard(currentPlayer, state);
    21600:  700:    }
        -:  701:
        -:  702:    //discard card from hand
    10800:  703:    discardCard(handPos, currentPlayer, state, 0);
    10800:  704:    return 0;
        -:  705:}
        -:  706:
        -:  707:// village
        -:  708:// 3 ********************************************************************* 3
        -:  709:int village_func(struct gameState *state, int handPos) {
        -:  710:
    #####:  711:    int currentPlayer = whoseTurn(state);
    #####:  712:    int nextPlayer = currentPlayer + 1;
        -:  713:
    #####:  714:    int tributeRevealedCards[2] = {-1, -1};
    #####:  715:    int z = 0;// this is the counter for the temp hand
    #####:  716:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  717:        nextPlayer = 0;
    #####:  718:    }
        -:  719:    //+1 Card
    #####:  720:    drawCard(currentPlayer, state);
        -:  721:
        -:  722:    //+2 Actions
    #####:  723:    state->numActions = state->numActions + 2;
        -:  724:
        -:  725:    //discard played card from hand
    #####:  726:    discardCard(--handPos, currentPlayer, state, 0);
    #####:  727:    return 0;
        -:  728:}
        -:  729:
        -:  730:// great hall
        -:  731:// 4 ********************************************************************* 4
        -:  732:int great_hall_func(struct gameState *state, int handPos) {
        -:  733:
    16200:  734:    int currentPlayer = whoseTurn(state);
    16200:  735:    int nextPlayer = currentPlayer + 1;
        -:  736:
    16200:  737:    int tributeRevealedCards[2] = {-1, -1};
    16200:  738:    int z = 0;// this is the counter for the temp hand
    16200:  739:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  740:        nextPlayer = 0;
    #####:  741:    }
        -:  742:    //+1 Card
    16200:  743:    drawCard(nextPlayer, state);
        -:  744:
        -:  745:    //+1 Actions
    16200:  746:    state->numActions++;
        -:  747:
        -:  748:    //discard card from hand
    16200:  749:    discardCard(handPos, currentPlayer, state, 0);
    16200:  750:    return 0;
        -:  751:}
        -:  752:
        -:  753:
        -:  754:// embargo
        -:  755:// 5 ************************************************************************ 5
        -:  756:int embargo_func(struct gameState *state, int choice1, int handPos) {
        -:  757:
    #####:  758:    int currentPlayer = whoseTurn(state);
    #####:  759:    int nextPlayer = currentPlayer + 1;
        -:  760:
    #####:  761:    int tributeRevealedCards[2] = {-1, -1};
    #####:  762:    int z = 0;// this is the counter for the temp hand
    #####:  763:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  764:        nextPlayer = 0;
    #####:  765:    }
        -:  766:
        -:  767:    //+2 Coins
    #####:  768:    state->coins = state->coins + 2;
        -:  769:
        -:  770:    //see if selected pile is in play
    #####:  771:    if ( state->supplyCount[choice1] == -1 )
        -:  772:    {
    #####:  773:        return -1;
        -:  774:    }
        -:  775:
        -:  776:    //add embargo token to selected supply pile
    #####:  777:    state->embargoTokens[choice1]++;
        -:  778:
        -:  779:    //trash card
    #####:  780:    discardCard(handPos, currentPlayer, state, 1);
    #####:  781:    return 0;
        -:  782:
    #####:  783:}
        -:  784:
        -:  785:
        -:  786:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  787:{
        -:  788:  int i;
        -:  789:  int j;
        -:  790:  int k;
        -:  791:  int x;
        -:  792:  int index;
    27000:  793:  int currentPlayer = whoseTurn(state);
    27000:  794:  int nextPlayer = currentPlayer + 1;
        -:  795:
    27000:  796:  int tributeRevealedCards[2] = {-1, -1};
        -:  797:  int temphand[MAX_HAND];// moved above the if statement
    27000:  798:  int drawntreasure=0;
        -:  799:  int cardDrawn;
    27000:  800:  int z = 0;// this is the counter for the temp hand
    27000:  801:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  802:    nextPlayer = 0;
    #####:  803:  }
        -:  804:
        -:  805:  //uses switch to select card and perform actions
    27000:  806:  switch( card )
        -:  807:    {
        -:  808:    case adventurer:
    #####:  809:        return adventurer_func(state);
        -:  810:
        -:  811:    case council_room:
        -:  812:      //+4 Cards
    #####:  813:      for (i = 0; i < 4; i++)
        -:  814:	{
    #####:  815:	  drawCard(currentPlayer, state);
    #####:  816:	}
        -:  817:
        -:  818:      //+1 Buy
    #####:  819:      state->numBuys++;
        -:  820:
        -:  821:      //Each other player draws a card
    #####:  822:      for (i = 0; i < state->numPlayers; i++)
        -:  823:	{
    #####:  824:	  if ( i != currentPlayer )
        -:  825:	    {
    #####:  826:	      drawCard(i, state);
    #####:  827:	    }
    #####:  828:	}
        -:  829:
        -:  830:      //put played card in played card pile
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:
    #####:  833:      return 0;
        -:  834:
        -:  835:    case feast:
        -:  836:      //gain card with cost up to 5
        -:  837:      //Backup hand
    #####:  838:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  839:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  840:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  841:      }
        -:  842:      //Backup hand
        -:  843:
        -:  844:      //Update Coins for Buy
    #####:  845:      updateCoins(currentPlayer, state, 5);
    #####:  846:      x = 1;//Condition to loop on
    #####:  847:      while( x == 1) {//Buy one card
    #####:  848:	if (supplyCount(choice1, state) <= 0){
        -:  849:	  if (DEBUG)
        -:  850:	    printf("None of that card left, sorry!\n");
        -:  851:
        -:  852:	  if (DEBUG){
        -:  853:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  854:	  }
    #####:  855:	}
    #####:  856:	else if (state->coins < getCost(choice1)){
    #####:  857:	  printf("That card is too expensive!\n");
        -:  858:
        -:  859:	  if (DEBUG){
        -:  860:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  861:	  }
    #####:  862:	}
        -:  863:	else{
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  867:	  }
        -:  868:
    #####:  869:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  870:	  x = 0;//No more buying cards
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  874:	  }
        -:  875:
        -:  876:	}
        -:  877:      }
        -:  878:
        -:  879:      //Reset Hand
    #####:  880:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  881:	state->hand[currentPlayer][i] = temphand[i];
    #####:  882:	temphand[i] = -1;
    #####:  883:      }
        -:  884:      //Reset Hand
        -:  885:
    #####:  886:      return 0;
        -:  887:
        -:  888:    case gardens:
    #####:  889:      return -1;
        -:  890:
        -:  891:    case mine:
    #####:  892:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  893:
    #####:  894:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  895:	{
    #####:  896:	  return -1;
        -:  897:	}
        -:  898:
    #####:  899:      if (choice2 > treasure_map || choice2 < curse)
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  905:	{
    #####:  906:	  return -1;
        -:  907:	}
        -:  908:
    #####:  909:      gainCard(choice2, state, 2, currentPlayer);
        -:  910:
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
        -:  913:
        -:  914:      //discard trashed card
    #####:  915:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  916:	{
    #####:  917:	  if (state->hand[currentPlayer][i] == j)
        -:  918:	    {
    #####:  919:	      discardCard(i, currentPlayer, state, 0);
    #####:  920:	      break;
        -:  921:	    }
    #####:  922:	}
        -:  923:
    #####:  924:      return 0;
        -:  925:
        -:  926:    case remodel:
    #####:  927:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  928:
    #####:  929:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      gainCard(choice2, state, 0, currentPlayer);
        -:  935:
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:
        -:  939:      //discard trashed card
    #####:  940:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  941:	{
    #####:  942:	  if (state->hand[currentPlayer][i] == j)
        -:  943:	    {
    #####:  944:	      discardCard(i, currentPlayer, state, 0);
    #####:  945:	      break;
        -:  946:	    }
    #####:  947:	}
        -:  948:
        -:  949:
    #####:  950:      return 0;
        -:  951:
        -:  952:    case smithy:
    10800:  953:        return smithy_func(state, handPos);
        -:  954:
        -:  955:    case village:
    #####:  956:        return village_func(state, handPos);
        -:  957:
        -:  958:    case baron:
    #####:  959:      state->numBuys++;//Increase buys by 1!
    #####:  960:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  961:	int p = 0;//Iterator for hand!
    #####:  962:	int card_not_discarded = 1;//Flag for discard set!
    #####:  963:	while(card_not_discarded){
    #####:  964:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  965:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  966:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  967:	    state->discardCount[currentPlayer]++;
    #####:  968:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  969:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  970:	    }
    #####:  971:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  972:	    state->handCount[currentPlayer]--;
    #####:  973:	    card_not_discarded = 0;//Exit the loop
    #####:  974:	  }
    #####:  975:	  else if (p > state->handCount[currentPlayer]){
        -:  976:	    if(DEBUG) {
        -:  977:	      printf("No estate cards in your hand, invalid choice\n");
        -:  978:	      printf("Must gain an estate if there are any\n");
        -:  979:	    }
    #####:  980:	    if (supplyCount(estate, state) > 0){
    #####:  981:	      gainCard(estate, state, 0, currentPlayer);
    #####:  982:	      state->supplyCount[estate]--;//Decrement estates
    #####:  983:	      if (supplyCount(estate, state) == 0){
    #####:  984:		isGameOver(state);
    #####:  985:	      }
    #####:  986:	    }
    #####:  987:	    card_not_discarded = 0;//Exit the loop
    #####:  988:	  }
        -:  989:
        -:  990:	  else{
    #####:  991:	    p++;//Next card
        -:  992:	  }
        -:  993:	}
    #####:  994:      }
        -:  995:
        -:  996:      else{
    #####:  997:	if (supplyCount(estate, state) > 0){
    #####:  998:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  999:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1000:	  if (supplyCount(estate, state) == 0){
    #####: 1001:	    isGameOver(state);
    #####: 1002:	  }
    #####: 1003:	}
        -: 1004:      }
        -: 1005:
        -: 1006:
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case great_hall:
    16200: 1010:            return great_hall_func(state, handPos);
        -: 1011:
        -: 1012:    case minion:
        -: 1013:      //+1 action
    #####: 1014:      state->numActions++;
        -: 1015:
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:
    #####: 1019:      if (choice1)		//+2 coins
        -: 1020:	{
    #####: 1021:	  state->coins = state->coins + 2;
    #####: 1022:	}
        -: 1023:
    #####: 1024:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1025:	{
        -: 1026:	  //discard hand
    #####: 1027:	  while(numHandCards(state) > 0)
        -: 1028:	    {
    #####: 1029:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1030:	    }
        -: 1031:
        -: 1032:	  //draw 4
    #####: 1033:	  for (i = 0; i < 4; i++)
        -: 1034:	    {
    #####: 1035:	      drawCard(currentPlayer, state);
    #####: 1036:	    }
        -: 1037:
        -: 1038:	  //other players discard hand and redraw if hand size > 4
    #####: 1039:	  for (i = 0; i < state->numPlayers; i++)
        -: 1040:	    {
    #####: 1041:	      if (i != currentPlayer)
        -: 1042:		{
    #####: 1043:		  if ( state->handCount[i] > 4 )
        -: 1044:		    {
        -: 1045:		      //discard hand
    #####: 1046:		      while( state->handCount[i] > 0 )
        -: 1047:			{
    #####: 1048:			  discardCard(handPos, i, state, 0);
        -: 1049:			}
        -: 1050:
        -: 1051:		      //draw 4
    #####: 1052:		      for (j = 0; j < 4; j++)
        -: 1053:			{
    #####: 1054:			  drawCard(i, state);
    #####: 1055:			}
    #####: 1056:		    }
    #####: 1057:		}
    #####: 1058:	    }
        -: 1059:
    #####: 1060:	}
    #####: 1061:      return 0;
        -: 1062:
        -: 1063:    case steward:
    #####: 1064:      if (choice1 == 1)
        -: 1065:	{
        -: 1066:	  //+2 cards
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
    #####: 1070:      else if (choice1 == 2)
        -: 1071:	{
        -: 1072:	  //+2 coins
    #####: 1073:	  state->coins = state->coins + 2;
    #####: 1074:	}
        -: 1075:      else
        -: 1076:	{
        -: 1077:	  //trash 2 cards in hand
    #####: 1078:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1079:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1080:	}
        -: 1081:
        -: 1082:      //discard card from hand
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:    case tribute:
    #####: 1087:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1088:	if (state->deckCount[nextPlayer] > 0){
    #####: 1089:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	  state->deckCount[nextPlayer]--;
    #####: 1091:	}
    #####: 1092:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1093:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1094:	  state->discardCount[nextPlayer]--;
    #####: 1095:	}
        -: 1096:	else{
        -: 1097:	  //No Card to Reveal
        -: 1098:	  if (DEBUG){
        -: 1099:	    printf("No cards to reveal\n");
        -: 1100:	  }
        -: 1101:	}
    #####: 1102:      }
        -: 1103:
        -: 1104:      else{
    #####: 1105:	if (state->deckCount[nextPlayer] == 0){
    #####: 1106:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1107:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1108:	    state->deckCount[nextPlayer]++;
    #####: 1109:	    state->discard[nextPlayer][i] = -1;
    #####: 1110:	    state->discardCount[nextPlayer]--;
    #####: 1111:	  }
        -: 1112:
    #####: 1113:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1114:	}
    #####: 1115:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1116:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1117:	state->deckCount[nextPlayer]--;
    #####: 1118:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1119:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1120:	state->deckCount[nextPlayer]--;
        -: 1121:      }
        -: 1122:
    #####: 1123:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1124:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1125:	state->playedCardCount++;
    #####: 1126:	tributeRevealedCards[1] = -1;
    #####: 1127:      }
        -: 1128:
    #####: 1129:      for (i = 0; i <= 2; i ++){
    #####: 1130:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1131:	  state->coins += 2;
    #####: 1132:	}
        -: 1133:
    #####: 1134:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1135:	  drawCard(currentPlayer, state);
    #####: 1136:	  drawCard(currentPlayer, state);
    #####: 1137:	}
        -: 1138:	else{//Action Card
    #####: 1139:	  state->numActions = state->numActions + 2;
        -: 1140:	}
    #####: 1141:      }
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:
        -: 1145:    case ambassador:
    #####: 1146:      j = 0;		//used to check if player has enough cards to discard
        -: 1147:
    #####: 1148:      if (choice2 > 2 || choice2 < 0)
        -: 1149:	{
    #####: 1150:	  return -1;
        -: 1151:	}
        -: 1152:
    #####: 1153:      if (choice1 == handPos)
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:
    #####: 1158:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1159:	{
    #####: 1160:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1161:	    {
    #####: 1162:	      j++;
    #####: 1163:	    }
    #####: 1164:	}
    #####: 1165:      if (j < choice2)
        -: 1166:	{
    #####: 1167:	  return -1;
        -: 1168:	}
        -: 1169:
        -: 1170:      if (DEBUG)
        -: 1171:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1172:
        -: 1173:      //increase supply count for choosen card by amount being discarded
    #####: 1174:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1175:
        -: 1176:      //each other player gains a copy of revealed card
    #####: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
    #####: 1179:	  if (i != currentPlayer)
        -: 1180:	    {
    #####: 1181:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1182:	    }
    #####: 1183:	}
        -: 1184:
        -: 1185:      //discard played card from hand
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);
        -: 1187:
        -: 1188:      //trash copies of cards returned to supply
    #####: 1189:      for (j = 0; j < choice2; j++)
        -: 1190:	{
    #####: 1191:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1192:	    {
    #####: 1193:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1194:		{
    #####: 1195:		  discardCard(i, currentPlayer, state, 1);
    #####: 1196:		  break;
        -: 1197:		}
    #####: 1198:	    }
    #####: 1199:	}
        -: 1200:
    #####: 1201:      return 0;
        -: 1202:
        -: 1203:    case cutpurse:
        -: 1204:
    #####: 1205:      updateCoins(currentPlayer, state, 2);
    #####: 1206:      for (i = 0; i < state->numPlayers; i++)
        -: 1207:	{
    #####: 1208:	  if (i != currentPlayer)
        -: 1209:	    {
    #####: 1210:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1211:		{
    #####: 1212:		  if (state->hand[i][j] == copper)
        -: 1213:		    {
    #####: 1214:		      discardCard(j, i, state, 0);
    #####: 1215:		      break;
        -: 1216:		    }
    #####: 1217:		  if (j == state->handCount[i])
        -: 1218:		    {
    #####: 1219:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1220:			{
        -: 1221:			  if (DEBUG)
        -: 1222:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1223:			}
    #####: 1224:		      break;
        -: 1225:		    }
    #####: 1226:		}
        -: 1227:
    #####: 1228:	    }
        -: 1229:
    #####: 1230:	}
        -: 1231:
        -: 1232:      //discard played card from hand
    #####: 1233:      discardCard(handPos, currentPlayer, state, 0);
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:
        -: 1238:    case embargo:
    #####: 1239:        return embargo_func(state, choice1, handPos);
        -: 1240:
        -: 1241:    case outpost:
        -: 1242:      //set outpost flag
    #####: 1243:      state->outpostPlayed++;
        -: 1244:
        -: 1245:      //discard card
    #####: 1246:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1247:      return 0;
        -: 1248:
        -: 1249:    case salvager:
        -: 1250:      //+1 buy
    #####: 1251:      state->numBuys++;
        -: 1252:
    #####: 1253:      if (choice1)
        -: 1254:	{
        -: 1255:	  //gain coins equal to trashed card
    #####: 1256:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1257:	  //trash card
    #####: 1258:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1259:	}
        -: 1260:
        -: 1261:      //discard card
    #####: 1262:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1263:      return 0;
        -: 1264:
        -: 1265:    case sea_hag:
    #####: 1266:      for (i = 0; i < state->numPlayers; i++){
    #####: 1267:	if (i != currentPlayer){
    #####: 1268:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1269:	  state->discardCount[i]++;
    #####: 1270:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1271:	}
    #####: 1272:      }
    #####: 1273:      return 0;
        -: 1274:
        -: 1275:    case treasure_map:
        -: 1276:      //search hand for another treasure_map
    #####: 1277:      index = -1;
    #####: 1278:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1279:	{
    #####: 1280:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1281:	    {
    #####: 1282:	      index = i;
    #####: 1283:	      break;
        -: 1284:	    }
    #####: 1285:	}
    #####: 1286:      if (index > -1)
        -: 1287:	{
        -: 1288:	  //trash both treasure cards
    #####: 1289:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1290:	  discardCard(index, currentPlayer, state, 1);
        -: 1291:
        -: 1292:	  //gain 4 Gold cards
    #####: 1293:	  for (i = 0; i < 4; i++)
        -: 1294:	    {
    #####: 1295:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1296:	    }
        -: 1297:
        -: 1298:	  //return success
    #####: 1299:	  return 1;
        -: 1300:	}
        -: 1301:
        -: 1302:      //no second treasure_map found in hand
    #####: 1303:      return -1;
        -: 1304:    }
        -: 1305:
    #####: 1306:  return -1;
    27000: 1307:}
        -: 1308:
        -: 1309:
        -: 1310:
        -: 1311:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1312:{
        -: 1313:
        -: 1314:  //if card is not trashed, added to Played pile
    27000: 1315:  if (trashFlag < 1)
        -: 1316:    {
        -: 1317:      //add card to played pile
    27000: 1318:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    27000: 1319:      state->playedCardCount++;
    27000: 1320:    }
        -: 1321:
        -: 1322:  //set played card to -1
    27000: 1323:  state->hand[currentPlayer][handPos] = -1;
        -: 1324:
        -: 1325:  //remove card from player's hand
    27000: 1326:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1327:    {
        -: 1328:      //reduce number of cards in hand
       11: 1329:      state->handCount[currentPlayer]--;
       11: 1330:    }
    26989: 1331:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1332:    {
        -: 1333:      //reduce number of cards in hand
        8: 1334:      state->handCount[currentPlayer]--;
        8: 1335:    }
        -: 1336:  else
        -: 1337:    {
        -: 1338:      //replace discarded card with last card in hand
    26981: 1339:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1340:      //set last card to -1
    26981: 1341:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1342:      //reduce number of cards in hand
    26981: 1343:      state->handCount[currentPlayer]--;
        -: 1344:    }
        -: 1345:
    27000: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1350:{
        -: 1351:  //Note: supplyPos is enum of choosen card
        -: 1352:
        -: 1353:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1354:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1355:    {
    #####: 1356:      return -1;
        -: 1357:    }
        -: 1358:
        -: 1359:  //added card for [whoseTurn] current player:
        -: 1360:  // toFlag = 0 : add to discard
        -: 1361:  // toFlag = 1 : add to deck
        -: 1362:  // toFlag = 2 : add to hand
        -: 1363:
    #####: 1364:  if (toFlag == 1)
        -: 1365:    {
    #####: 1366:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1367:      state->deckCount[player]++;
    #####: 1368:    }
    #####: 1369:  else if (toFlag == 2)
        -: 1370:    {
    #####: 1371:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1372:      state->handCount[player]++;
    #####: 1373:    }
        -: 1374:  else
        -: 1375:    {
    #####: 1376:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1377:      state->discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:  //decrease number in supply pile
    #####: 1381:  state->supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:  return 0;
    #####: 1384:}
        -: 1385:
        -: 1386:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1387:{
        -: 1388:  int i;
        -: 1389:
        -: 1390:  //reset coin count
    27000: 1391:  state->coins = 0;
        -: 1392:
        -: 1393:  //add coins for each Treasure card in player's hand
   324000: 1394:  for (i = 0; i < state->handCount[player]; i++)
        -: 1395:    {
   135000: 1396:      if (state->hand[player][i] == copper)
        -: 1397:	{
    94188: 1398:	  state->coins += 1;
    94188: 1399:	}
    40812: 1400:      else if (state->hand[player][i] == silver)
        -: 1401:	{
    #####: 1402:	  state->coins += 2;
    #####: 1403:	}
    40812: 1404:      else if (state->hand[player][i] == gold)
        -: 1405:	{
    #####: 1406:	  state->coins += 3;
    #####: 1407:	}
   135000: 1408:    }
        -: 1409:
        -: 1410:  //add bonus
    27000: 1411:  state->coins += bonus;
        -: 1412:
    27000: 1413:  return 0;
        -: 1414:}
        -: 1415:
        -: 1416:
        -: 1417://end of dominion.c
